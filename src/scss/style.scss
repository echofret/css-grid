@import "settings";

html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}

html,
body {
  height: 100%;
  padding: 0;
  margin: 0;
}

@mixin for-size($size) {
  @if $size == phone-only {
    @media (max-width: 599px) { @content; }
  } @else if $size == tablet-portrait-up {
    @media (min-width: 600px) { @content; }
  } @else if $size == tablet-landscape-up {
    @media (min-width: 900px) { @content; }
  } @else if $size == desktop-up {
    @media (min-width: 1200px) { @content; }
  } @else if $size == big-desktop-up {
    @media (min-width: 1800px) { @content; }
  }
}

@mixin box {
  background-color: $black;
  color: $white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 44px;
  text-transform: uppercase;
}

// Ensure CSS grid works with IE 11 spec.
// https://css-tricks.com/browser-compatibility-css-grid-layouts-simple-sass-mixins/
// sass-lint:disable no-vendor-prefixes, no-duplicate-properties
@mixin display-grid {
  display: -ms-grid;
  display: grid;
}

// $columns values should be delimited by a space
@mixin grid-template-columns($columns...) {
  -ms-grid-columns: $columns;
  grid-template-columns: $columns;
}

// $rows values should be delimited by a space
@mixin grid-template-rows($rows...) {
  -ms-grid-rows: $rows;
  grid-template-rows: $rows;
}

// Can be used in combination with above grid-template-X mixins.
// These result in the same output:
// @include grid-template-columns(10px grid-repeat(4, 20px) 30px);
// @include grid-template-columns(10px 20px 20px 20px 20px 30px);
@function grid-repeat($repeat, $stuff: 1fr) {
  $list: ();
  @for $i from 1 through $repeat {
    $list: append($list, $stuff, space);
  }
  @return $list;
}

@mixin grid-column($col-start, $col-end) {
  -ms-grid-column: $col-start;
  -ms-grid-column-span: $col-end - $col-start;
  grid-column: #{$col-start} / #{$col-end};
}

@mixin grid-row($row-start, $row-end) {
  -ms-grid-row: $row-start;
  -ms-grid-row-span: $row-end - $row-start;
  grid-row: #{$row-start} / #{$row-end};
}

@mixin grid-align-self($value) {
  -ms-grid-row-align: $value;
  align-self: $value;
}

@mixin grid-justify-self($value) {
  -ms-grid-column-align: $value;
  justify-self: $value;
}

.grid-container {
  @include display-grid;
  @include grid-template-columns(grid-repeat(12, 1fr));
  @include grid-template-rows(grid-repeat(12, 1fr));
  height: 100%;
  border: 4px solid $black;
  grid-column-gap: 10px;
  grid-row-gap: 10px;

  @include for-size(phone-only) {
    @include grid-template-columns(grid-repeat(12, 1fr));
    @include grid-template-rows(grid-repeat(12, 1fr));
  }
}

.item-a {
  transition: ease all 2s;
  @include box;
  @include for-size(phone-only) {
    background-color: red;
    @include grid-column(2, 12);
    @include grid-row(2, 4);

  }
  @include grid-column(2, 6);
  @include grid-row(2, 12);
}

.item-b {
  transition: ease all 2s;
  @include box;
  @include for-size(phone-only) {
    background-color: blue;
    @include grid-column(2, 12);
    @include grid-row(4, 6);
  }
  @include grid-column(6, 12);
  @include grid-row(2, 4);
}

.item-c {
  transition: ease all 2s;
  @include box;
  @include for-size(phone-only) {
    background-color: yellowgreen;
    @include grid-column(2, 7);
    @include grid-row(6, 11);
  }
  @include grid-column(6, 10);
  @include grid-row(4, 10);
}

.item-d {
  transition: ease all 2s;
  @include box;
  @include for-size(phone-only) {
    background-color: gold;
    @include grid-column(7, 12);
    @include grid-row(6, 11);
  }
  @include grid-column(10, 12);
  @include grid-row(4, 12);
}

.item-e {
  transition: ease all 2s;
  @include box;
  @include for-size(phone-only) {
    background-color: orange;
    @include grid-column(2, 12);
    @include grid-row(11, 12);
  }
  @include grid-column(6, 10);
  @include grid-row(10, 12);
}
